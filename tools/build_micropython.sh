#!/bin/bash

##
#
# @file		build_micropython.sh
#
# @brief	Build Micropython-Image
#
# @author	Timur Nitt <tn.devel@nittix.info>
#
# @copyright	© 2024, 2025 Timur Nitt
#
# @version	0.4
#
# @date		2024-11-14
#		- Initial step
#
# @date		2025-04-12
#		- Patch for ch422g.py
#
# @date		2025-04-23
#		- Additional patches
#
# @date		2025-05-15
#		- Images
#
# @date		2025-05-18
#		- Prepared for public usage
#

EEZ_PROJECT="___Your_EEZ_Project___"
MY_POSITION=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
PROJECT_ROOT="$MY_POSITION"/..
MICROPY_ROOT="$PROJECT_ROOT"/lvgl_micropython

# Source paths of font and image files. These files are generated by the
# »EEZ Studio« software. In another milestone step a python script will be
# implemented to make these things automatically without the EEZ.
# Adapt these paths if they are located somewhere else.
FONT_FILES=$(ls "$PROJECT_ROOT"/eez/$EEZ_PROJECT/src/ui/ui_font_*.c 2>/dev/null)
IMAGE_FILES=$(ls "$PROJECT_ROOT"/eez/$EEZ_PROJECT/src/ui/ui_image_*.c 2>/dev/null)

# A value of 1 in USE_MONITORING displays memory consumption and frames per
# second at the lower corners (ignore it, because it shows a value of 0 only,
# why what ever...).
USE_MONITORING=0

#
# Clone main repository.
#
function clone () {
	
	cd "$PROJECT_ROOT"
	git clone https://github.com/lvgl-micropython/lvgl_micropython "$MICROPY_ROOT"
}

#
# Build binary Micropython image with LVGL support.
#
function build () {

	cd "$MICROPY_ROOT"
	python3 make.py esp32 \
		BOARD=ESP32_GENERIC_S3 \
		BOARD_VARIANT=SPIRAM_OCT \
		--flash-size=8 \
		--enable-cdc-repl=n \
		--enable-jtag-repl=n \
		--enable-uart-repl=y \
		--uart-repl-bitrate=115200 \
		DISPLAY=rgb_display \
		INDEV=gt911 \
		EXPANDER=ch422g \
		CONFIG_FREERTOS_HZ=1000 \
		CONFIG_ESP_DEFAULT_CPU_FREQ_MHZ_240=y \
		CONFIG_ESPTOOLPY_FLASHMODE_QIO=y \
		CONFIG_ESPTOOLPY_FLASHFREQ_120M=y \
		CONFIG_IDF_EXPERIMENTAL_FEATURES=y \
		CONFIG_SPIRAM_SPEED_120M=y \
		CONFIG_SPIRAM_FETCH_INSTRUCTIONS=y \
		CONFIG_SPIRAM_RODATA=y \
		CONFIG_ESP32S3_DATA_CACHE_LINE_64B=y \
		CONFIG_COMPILER_OPTIMIZATION_PERF=y
}

#
# Use own fonts.
#
function import_fonts () {

	cd "$MICROPY_ROOT"
	font_declaration=""
	for font_file in $FONT_FILES; do
		if [ ! -f "$font_file" ]; then
			continue
		fi
		name=$(basename "$font_file" .c)
		cp -v "$font_file" "$MICROPY_ROOT"/lib/lvgl/src/font/
		font_declaration="$font_declaration LV_FONT_DECLARE($name)"
	done

	if [ "${font_declaration}x" != "x" ]; then
		sed -i "s/#define LV_FONT_CUSTOM_DECLARE/&$font_declaration/g" lib/lv_conf.h
	else
		echo -e "\E[1;31mWarning: Font files not found.\E[0;32m"
	fi
}

#
# Use own bitmap images.
#
function import_images () {

	cd "$MICROPY_ROOT"
	if [ "${IMAGE_FILES}x" != "x" ]; then
		mkdir -p lib/lvgl/src/image
		cat <<EOF > lib/lvgl/src/image/images.h
#pragma once

#include <lvgl.h>

#ifdef __cplusplus
extern "C" {
#endif

EOF
		count=0
		for image_file in $IMAGE_FILES; do
			if [ ! -f "$image_file" ]; then
				continue
			fi
			name=$(basename "$image_file" .c | awk -F 'ui_image_' '{print $2}')
			cp -v "$image_file" lib/lvgl/src/image/
			echo "extern const lv_img_dsc_t img_$name;" >> lib/lvgl/src/image/images.h
			count=$((count+1))
		done
		cat <<EOF >> lib/lvgl/src/image/images.h

#ifndef EXT_IMG_DESC_T
#define EXT_IMG_DESC_T
typedef struct _ext_img_desc_t {
    const char *name;
    const lv_img_dsc_t *img_dsc;
} ext_img_desc_t;
#endif

extern const ext_img_desc_t images[$count];

#ifdef __cplusplus
}
#endif
EOF

		cat <<EOF > lib/lvgl/src/image/images.c
#include "py/obj.h"
#include "py/runtime.h"
#include "images.h"

const ext_img_desc_t images[$count] = {
EOF
		for image_file in $IMAGE_FILES; do
			if [ ! -f "$image_file" ]; then
				continue
			fi
			name=$(basename "$image_file" .c | awk -F 'ui_image_' '{print $2}')
			echo "    {\"$name\", &img_$name}," >> lib/lvgl/src/image/images.c
		done
		cat <<EOF >> lib/lvgl/src/image/images.c
};

static const mp_rom_map_elem_t own_images_globals_table[] = {
EOF
		for image_file in $IMAGE_FILES; do
			if [ ! -f "$image_file" ]; then
				continue
			fi
			name=$(basename "$image_file" .c | awk -F 'ui_image_' '{print $2}')
			echo "    {MP_ROM_QSTR (MP_QSTR_$name), MP_ROM_PTR (&img_$name)}," >> lib/lvgl/src/image/images.c
		done
		cat <<EOF >> lib/lvgl/src/image/images.c
};

static MP_DEFINE_CONST_DICT (own_images_module_globals, own_images_globals_table);

const mp_obj_module_t own_images_module = {
    .base = { &mp_type_module },
    .globals = (mp_obj_dict_t*) &own_images_module_globals,
};

MP_REGISTER_MODULE (MP_QSTR_own_images, own_images_module)
EOF
		cat <<EOF > lib/lvgl/src/image/micropython.mk
SRC_USERMOD += "$MICROPY_ROOT"/lib/lvgl/src/image/images.c
EOF
	else
		echo -e "\E[1;31mWarning: Bitmap image files not found.\E[0;32m"
	fi

}

#
# Make changes of the LVGL configuration.
#
function select_settings () {

	cd "$MICROPY_ROOT"
	# Display refresh.
	#sed -i "s/#define LV_DEF_REFR_PERIOD  33/#define LV_DEF_REFR_PERIOD  10/g" lib/lv_conf.h

	# Color depth.
	sed -i "s/#define MICROPY_COLOR_DEPTH  32/#define MICROPY_COLOR_DEPTH  16/g" lib/lv_conf.h

	if [ $USE_MONITORING -eq 1 ]; then
		# Switch on monitoring generally.
		sed -i "s/#define LV_USE_SYSMON   0/#define LV_USE_SYSMON   1/g" lib/lv_conf.h
		# Enable performance monitor.
		sed -i "s/#define LV_USE_PERF_MONITOR 0/#define LV_USE_PERF_MONITOR 1/g" lib/lv_conf.h
		# Enable memory consumption monitor.
		sed -i "s/#define LV_USE_MEM_MONITOR 0/#define LV_USE_MEM_MONITOR 1/g" lib/lv_conf.h
	fi
}

#
# Fix some bugs and patch the software.
#
function adapt_software () {
	
	cd "$MICROPY_ROOT"
	# Enable font Montserrat at a size of 20.
	patch --verbose -d "$MICROPY_ROOT" -Np1 -i ../patches/lvgl_micropython-activate_montserrat_20-1.patch

	# Disable KD Schlosser's changes of his black line issue, because it
	# doesn't work on Waveshare display.
	patch --verbose -d "$MICROPY_ROOT" -Np1 -i ../patches/lvgl_micropython-bpl_calc-1.patch

	# Fix an issue of some string lengths while using gcc-15.1.0.
	patch --verbose -d "$MICROPY_ROOT" -Np1 -i ../patches/lvgl_micropython-str_length-2.patch

	# Activate own modules stuff.
	cat <<EOF >> lib/micropython/ports/esp32/mpconfigport.h
#ifndef MICROPY_REGISTER_MODULE
#define MICROPY_REGISTER_MODULE (1)
#endif
EOF
}

# Clone KD Schlosser's repository.
clone

# *** Build, stage 1/2 ***
# If you want to make changes of the software, first you have to build the
# entire image. This step ensures that all nessesary sub-repositories are
# cloned. If you are using gcc-15.1.0 and later this step will fail of some
# string length issues. Ignore that failure.
build

# Colorize all change steps
echo -e "\E[0;32m"

# Import your fonts.
import_fonts

# Import your bitmap images. This task doesn't work at the moment. For now you
# haven't any chance to reach your builtin bitmaps. It is the next milestone
# on the developer's list.
import_images

# Change some settings in lv_conf.h.
select_settings

# Fix some bugs and patch the software.
adapt_software
echo -e "\E[0m"

# *** Build, stage 2/2 ***
# And now build the entire image with the adapted software.
build

